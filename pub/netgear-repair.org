#+Title: Automated Repair of Exploits in NETGEAR Router Binary
#+Author:
#+Options: toc:nil ^:{}
#+HTML_Head: <link rel="stylesheet" type="text/css" href="../etc/netgear-repair.css" />
#+LaTeX_Class: sigcomm-alternative
#+LaTeX: \usetikzlibrary{arrows,decorations,decorations.pathreplacing,shapes}

#+LaTeX: \begin{abstract}
Upon discovering a software exploit security researchers must decide
either to publish the exploit informing users and potential attackers,
or to privately inform the software vendor leaving users in the dark
and risking delay by the vendor.  We propose an alternative in which
researchers use the newly discovered exploits to drive an automated
repair technique capable of patching exploits with no access to source
code or special information from the software vendor.

We demonstrate this approach by patching recently discovered exploits
in version 4 of NETGEAR's WNDR3700 wireless router /before/ NETGEAR
publicly addressed the exploits---to the author's knowledge NETGEAR
has not patched these exploits at the time of submission.

We describe the repair process including; extraction of the faulty
executable from a firmware image distributed by NETGEAR, reproduction
of the exploits in a virtual machine and application of the repair
technique.  Since exploit authors will not normally have access to a
regression test suite we modify existing evolutionary repair technique
by running repair without any regression test suite.  We propose a
model of "lazy" regression test suite composition in which the user
only writes regression tests as needed and find that in the case of
the NETGEAR WNDR3700 only XXXX tests are needed to successfully
perform repair.  We discuss the feasibility and utility of this
technique for the security community.

# The tooling and technique demonstrated herein are available under open
# source licensing [fn:1] and may be generalized to other embedded
# binary executables and reproducible exploits increasing the options
# available to security researchers upon discovering new exploits.
#+LaTeX: \end{abstract}

* Introduction
Security exploits pose significant monetary and social risks.  By
Symantec's count 5,291 vulnerabilities were reported in 2012
cite:symantec2013threat.

Upon discovering new exploits researchers are faced with a decision
between immediately publicly announcing the exploit before the vendor
is allowed time to develop a patch in a policy known as "full
disclosure" or privately informing the vendor of the exploit.  The
former increases the number of attacks in the short term
cite:arora2006does, while the later risks the vendor ignoring the
exploit extending the life of the exploit (e.g., Oracle reportedly
waited months after researchers privately reported a bug in Java while
thousands of users were attacked before releasing a fix
cite:greenberg2012oracle).

In 2002, special advisor for cyberspace security to then President
Bush, Richard Clarke said "It is irresponsible and... extremely
damaging to release information before the patch is out."  However
there are instances when waiting to report may cause more damage and
the question of when to report an exploit has been studied is not
easily decidable in all cases cite:arora2008optimal.

Software vendors commonly delay releasing patches to security
exploits.  Microsoft waits until the second Tuesday of every month
(known as "Patch Tuesday") to release security patches
cite:lemos2003microsoft, leading malicious users to release new
exploits on the second Wednesday of every month (known as "Exploit
Wednesday") to maximize the time before a patch is released.

In a study of high and medium risk vulnerabilities in Microsoft and
Apple products between 2002 and 2008, ~10% of vulnerabilities were
found not to be patched within 150 days of disclosure, and on any
given date \sim10 vulnerabilities and >20 vulnerabilities were public and
un-patched for Microsoft and Apple respectively cite:frei20080.

We propose a new option for security researchers in which verifiable
exploits are used to automatically generate patches.  Such patches may
be either published with the exploit (it has been shown that reporting
an exploit with a patch in hand reduces the total number of attacks
cite:arora2006does), or sent privately to the software vendor where
they may speed the development of a patch cite:weimer06.

We demonstrate the feasibility of this approach using a technique of
automated evolutionary program repair cite:schulte2013embedded to
patch security vulnerabilities in the NETGEAR WNDR3700 wireless
router.  The technique requires no special information or access to
source code making it possible for researchers to repair even stripped
binary executables without any cooperation with the software vendor.
Although evolutionary program repair techniques typically require
access to a regression test suite, we explore the feasibility of
performing repair without any such test suite.  Our proposed technique
should be applicable to any verified exploit, the binary executable
and the proof of the exploit become the sole inputs required by the
repair algorithm.

In the remainder of this paper we; review two recent exploits to the
widely distributed NETGEAR WNDR3700 (Section [[#exploits]]), demonstrate
the feasibility of running the NETGEAR firmware in a VM sandbox
(Section [[#firmware]]), adapt existing techniques of automated program
repair originally applicable only to x86 and ARM ELF files to run on
stripped MIPS executables with no section tables (Section
[[#mips-mutation]]), and introduce and evaluate our modified program
repair technique which does not require an extant regression test
suite (Section [[#lazy]]).  We then analyze the runtime behavior and
results of the repair algorithm with respect to their functionality,
security and maintainability.

The contributions of this short paper are;
1. demonstrate the use of system emulation to build a virtualized
   execution environment allowing the evaluation of embedded device
   drivers
2. an application of automated repair to stripped MIPS ELF files
   recovered from router firmware
3. a modified version of evolutionary program repair which removes the
   requirement for a regression test suite
4. an application of automated repair to a real-world un-patched
   security exploit resulting in
5. the first demonstration of multiple repair in a single evolutionary
   run.

In the pursuit of /Reproducible Research/ cite:buckheit1995wavelab
cite:mesirov2010accessible and to encourage researchers to patch
future discovered exploits, a companion version control
repository [fn:1] contains all instructions, programs, and tooling
required to extract, execute and repair the binary NETGEAR router
image.  Additionally, the analysis performed in this document and all
supporting figures may be automatically regenerated from new
experimental data using the Org-mode Reproducible Research framework
cite:schulte2012reproducible-research.

We hope the ability to automatically patch vulnerable closed source
applications without having to wait for the software vendor to
acknowledge or address the exploit encourages users to patch their
vulnerable systems and researchers to release patches with exploit
announcements.

* Description of Exploits
  :PROPERTIES:
  :CUSTOM_ID: exploits
  :END:
In this work we repair a pair of exploits in version 4 the popular
NETGEAR WNDR3700 wireless router.  The "shodan" device search engine
reports 1496 vulnerable routers cite:shodan.  Both exploits exist in
the router's web server in a binary named =net-cgi=, and both are
related to how =net-cgi= handles authentication cite:zcutlip.

1. Any URI starting with the string "BRS" bypasses authentication.

2. Any URI including the string "unauth.cgi" or
   "securityquestions.cgi" bypass authentication even pages of the
   form =http://router/page.html?foo=unauth.cgi=.

Many administrative pages start with the "BRS" string, providing
attackers with access to personal information such as user's
passwords, and by accessing the page
=http://router/BRS_02_genieHelp.html= attackers can completely disable
authentication in a manner which is permanent across reboots.

* Repair Technique
To repair the =net-cgi= file we must extract the binary executable and
router file system from the firmware image distributed by NETGEAR.
Using the extracted filesystem and executable we construct a test
harness used both to exercise desirable behavior of =net-cgi= and to
exercise the exploits.  This test harness will be the fitness function
used by our GA repair algorithm to evaluate candidate repairs and to
identify when repairs to the exploits have been found.

** Router Firmware Extraction and Virtualization
   :PROPERTIES:
   :CUSTOM_ID: firmware
   :END:
NETGEAR distributes firmware holding a full system image for the
WNDR3700 router which include the router file system holding the
vulnerable =net-cgi= executable.  Extraction of the file system may be
accomplished using =binwalk= [fn:2], a firmware extraction tool which
scans the binary data in the firmware file searching for signatures
which identify the types of embedded data.  The =binwalk= tool
includes rules for identifying and extracting common embedded data
types, include a squashfs cite:lougher2006squashfs section holding the
router filesystem.

The router runs on a big-endian MIPS architecture.  Using the QEMU
cite:bellard2005qemu system emulator to emulate this architecture the
Debian Linux operating system is run in emulation.  After copying the
extracted router filesystem into the emulated MIPS Linux system,
commands may be executed in the environment which closely approximates
the environment of the NETGEAR router using the =chroot= command
pointing to the base of the extracted NETGEAR file system.

With this accomplished (and with a number of minor adjustments
described in full in the reproduction information [fn:3]) is it
possible to test both the existing desirable functionality and the
exploitable vulnerabilities in the =net-cgi= executable from the
command line using a Bash shell script [fn:4].

** Mutation of stripped MIPS ELF Files
   :PROPERTIES:
   :CUSTOM_ID: mips-mutation
   :END:
The repair of ELF format files is an extension of the technique
introduced in cite:schulte2013embedded.  The mutation operations are
used to modify the execution behavior of the ELF file.  In this case
the =net-cgi= file is stripped a minimal ELF file which does not
include much of the information assumed to exist by the previous
repair technique.

ELF (Executable and Linking Format) cite:tis1995tool files may either
be executed directly or may be linked with other files for future
execution.  The ELF file contains a number of headers and tables
containing administrative data, and sections holding program code and
data.  The three main administrative elements of an ELF file are the
ELF Header, the section table and the program table (see Figure [[elf]]).
The ELF Header points to the section table and the program table, the
section table holds information on the layout of sections in the ELF
file on disk, and the program table holds information on how to copy
section from disk into memory for program execution.

#+name: ELF-layout
#+header: :file (by-backend (latex 'nil) (t "elf-layout.svg"))
#+header: :results (by-backend (pdf "latex") (t "raw"))
#+header: :cache (by-backend (latex "no") (t "yes"))
#+begin_src latex
  \begin{tikzpicture}
    \node[draw,rectangle] (header) at (0,2) {ELF Header};
    \node[draw,rectangle] (st) at (0,0) {Section Table};
    \node[draw,rectangle] (body) at (0,-2) {...};
    \node[draw,rectangle] (pt) at (0,-4) {Program Table};
  \end{tikzpicture}
#+end_src

#+label: elf
#+Caption: Sections of an Executable and Linking Format (ELF) file.
#+RESULTS[231e95ccf88ea7ad53cb8e22e97f1c1cdf720ff1]: ELF-layout
[[file:elf-layout.svg]]

While the majority of ELF files include all three of these elements,
only the ELF Header is guaranteed to exist.  In executable ELF files
only the program table is required, and in linkable files only the
section table is required.

The previous ELF repair tool required a section table and a section
name string table, which were used to find the =.text= section of the
ELF file where program code is normally stored.  The data in the
=.text= section was then coerced into a "genome" a linear array of
assembly instructions which was modified by the mutation operations.
Our extension of this technique does not require a section table,
instead we build the genome from every section in the program table
which has a "loadable" type.  These are the sections which are loaded
into memory during program execution.

Mutation operations must change program data without corrupting the
structure of the file or breaking the many addresses hard coded into
the program data itself (in general it is impossible to distinguish
between an integer literal and an address in program data).  For this
reason the mutation operations are designed to preserve the absolute
size and the offsets within of the ELF program data.  This is made
much easier because the MIPS is a RISC (Reduced Instruction Set
Computing) architecture in which every argumented assembly instruction
is 1 word long cite:hennessy1982mips.  The mutation and crossover
operations used to modify ELF files are shown in Figure [[mutation-ops]].

#+name: mutation-ops
#+header: :file (by-backend (latex 'nil) (t "mut-ops.svg"))
#+header: :results (by-backend (pdf "latex") (t "raw"))
#+header: :cache (by-backend (latex "no") (t "yes"))
#+begin_src latex
  \tikzstyle{asmrow} = [rectangle, draw, minimum width=2em, minimum height=1em]
  \begin{tikzpicture}
    % Mutation
    \foreach \x in {-3.5,-2.5,-0.5,0.5,2.5,3.5}{
      \foreach \y in {-0.8,-0.4,0,0.4,0.8}{
        \node[asmrow,fill=green!40] at (\x,\y) {};
      }
    }
    % Replace
    \node at (-3,1.25) {Replace};
    \node[asmrow,fill=yellow!20] (c-from) at (-3.5,0.4) {};
    \node[asmrow,fill=blue!60] at (-3.5,-0.4) {};
    % replace-after
    \node[asmrow,fill=yellow!20] at (-2.5,0.4) {};
    \node[asmrow,fill=yellow!20] (c-to) at (-2.5,-0.4) {};
    \node[asmrow,fill=green!40]  at (-2.5,-0.8) {};
    % Delete
    \node at (0,1.25) {Delete};
    \node[asmrow,fill=red!40] (d-from) at (-0.5,0) {};
    % delete-after
    \node[asmrow,fill=white] (d-to) at (0.5,0) {\scriptsize{0x0}};
    % Swap
    \node at (3,1.25) {Swap};
    \node[asmrow,fill=yellow!20] (s1-from) at (2.5,0.4) {};
    \node[asmrow,fill=blue!60] (s2-from) at (2.5,-0.4) {};
    % swap-after
    \node[asmrow,fill=blue!60] (s2-to) at (3.5,0.4) {};
    \node[asmrow,fill=yellow!20] (s1-to) at (3.5,-0.4) {};
    % arrows
    \draw[->,thick] (c-from.east) to (c-to.west);
    \draw[->,thick] (d-from.east) to (d-to.west);
    \draw[->,thick] (s1-from.east) to (s1-to.west);
    \draw[->,thick] (s2-from.east) to (s2-to.west);
    % Crossover
    \foreach \x in {-1.5,1.5}{
      \foreach \y in {-3.8,-3.4,-3,-2.6,-2.2}{
        \node[asmrow,fill=green!40] at (\x,\y) {};
      }
    }
    \foreach \x in {-0.5}{
      \foreach \y in {-3.8,-3.4,-3,-2.6,-2.2}{
        \node[asmrow,fill=blue!60] at (\x,\y) {};
      }
    }
    \node at (0,-1.7) {Two Point Crossover};
    \draw[->,thick] (-2,-2.4) to (2,-2.4);
    \draw[->,thick] (-2,-3.2) to (2,-3.2);
    \node[asmrow,fill=blue!60] at (1.5,-2.6) {};
    \node[asmrow,fill=blue!60] at (1.5,-3) {};
  \end{tikzpicture}
#+end_src

#+label: mutation-ops
#+RESULTS[17b362c56616d0afadd5ff0131a9baaacdfdb23b]: mutation-ops
[[file:mut-ops.svg]]

** Lazy on demand Regression Testing
   :PROPERTIES:
   :CUSTOM_ID: lazy
   :END:

* Repair Results
** Repair Run
parameters used, runtime, etc...

- graph 1
  - points -- number of regression tests added (and runtime)
  - x axis -- coverage of repair (% instructions sampled)
  - y axis -- functionality of repair (% pages successfully served)

** Analysis of Repairs
- The repairs required two distinct fixes to two different exploits in a
  single long evolutionary run (an instance of "iterative repair").

- The initial evolved repair broke untested behavior (e.g., it worked
  when the cgi file was called directly on the command line but not
  through the embedded [[http://wiki.openwrt.org/doc/uci/uhttpd][µHTTPd]] webserver).  The minimized version of
  the repair fixed these issues and works as expected.

- The initial evolved repair differed from the original at 789
  distinct locations (measured with a unified diff), the minimized
  differed from the original at 2 such locations.

* COMMENT Proactive Repair?
Apply Zak's technique of proactive repair and see if anything shakes
out.

* Related Work
* Next Steps
- operation directly on a binary image
  - would require better virtualization
  - would require better fault localization
- proactive hardening
  - shutting off (read:breaking) insecure functionality such as
    password reset
  - combination with a fuzz tester in a closed exploit/repair loop
- distributed diversity
  - self certifying patches

* Conclusion
This technique demonstrates the current ability of end users to fix
software exploits in embedded devices without any special information
or help from the software vendor.

Estimate the amount of money cost by delay in release of vendor
patches?

#+BIBLIOGRAPHY: netgear-repair plain

* Footnotes

[fn:1] https://github.com/eschulte/netgear-repair

[fn:2] http://binwalk.org

[fn:3] http://eschulte.github.io/netgear-repair/INSTRUCTIONS.html

[fn:4] https://github.com/eschulte/netgear-repair/blob/master/bin/test-cgi

* COMMENT Notes [0/2]
** TODO define image and firmware
** TODO collect average bug lifetime from a bug database
