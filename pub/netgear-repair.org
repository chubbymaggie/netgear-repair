#+Title: Automated Repair of Exploits in NETGEAR Router Binary
#+Author: Eric Schulte
#+Options: toc:nil ^:{}
#+HTML_Head: <link rel="stylesheet" type="text/css" href="../etc/netgear-repair.css" />
#+LaTeX_Class: sigcomm-alternative
#+LaTeX: \usetikzlibrary{arrows,decorations,decorations.pathreplacing,shapes}

#+LaTeX: \begin{abstract}
Version 4 of NETGEAR's WNDR3700 wireless router contains exploits
allowing unauthenticated users to change administrative options and
completely disable authentication across reboots cite:zcutlip.

In this work we repair these exploits using a method of automated
program repair cite:schulte2013embedded which operates directly on
binary ELF files and requires no access to source code.  This fix was
found before NETGEAR addressed these exploits---to the author's
knowledge NETGEAR has not patched these exploits at the time of
submission.

We walk through the repair process including; extraction of the faulty
executable from a firmware image distributed by NETGEAR, reproduction
the exploits in a virtual machine, and application of the repair
technique.  The tooling and technique demonstrated herein (made
available under open source licensing [fn:1]) may be generalized to
other embedded binary executables and any reproducible exploit, making
it possible to patch future exploits in closed-source commercial
application without waiting for the software vendor to acknowledge or
address the exploit.
#+LaTeX: \end{abstract}

* Introduction
Security exploits pose a significant monetary with cyber attacks
estimated to have cost between $13 and $226 Billion in 2004
cite:cashell2004economic.

Upon discovering new exploits researchers are faced with a decision
between immediately publicly announcing the exploit before the vendor
is allowed time to develop a patch in a policy known as "full
disclosure" or privately informing the vendor of the exploit.  The
former increases the number of attacks while the vendor fixes the
patch cite:arora2006does, while the later risks the vendor ignoring
the exploit (e.g., Oracle reportedly waited months after researchers
privately reported a bug in Java while thousands of users were
attacked before releasing a fix cite:greenberg2012oracle).

In 2002, special advisor for cyberspace security to then President
Bush, Richard Clarke said "It is irresponsible and...extremely
damaging to release information before the patch is out."  However
there are instances when waiting to report may cause more damage and
the question of when to report an exploit has been studied is not
easily decidable in all cases cite:arora2008optimal.  It has been
shown that reporting a flaw with a patch in hand reduces the total
number of attacks cite:arora2006does.

Software vendors commonly delay releasing patches to security
exploits.  Microsoft waits until the second Tuesday of every month
(known as "Patch Tuesday") to release security patches
cite:lemos2003microsoft, leading malicious users to release new
exploits on the second Wednesday of every month (known as "Exploit
Wednesday") to maximize the time before a patch is released.

In a study of high and medium risk vulnerabilities in Microsoft and
Apple products between 2002 and 2008, ~10% of vulnerabilities were
found not to be patched within 150 days of disclosure, and on any
given date \sim10 vulnerabilities and >20 vulnerabilities were public and
un-patched for Microsoft and Apple respectively cite:frei20080.

We propose a new option for security researchers in which verifiable
exploits are used to automatically generate patches.  Such patches may
be either published with the exploit, or sent privately to the
software vendor where they may speed the development of a patch
cite:weimer06.

We demonstrate the feasibility of this approach using a technique of
automated program repair applicable to both assembly code to binary
ELF files cite:schulte2013embedded, to patch security vulnerabilities
in the NETGEAR WNDR3700 wireless router.  The technique requires no
special information or access to source code making it possible for
researchers to repair even stripped binary executables without any
cooperation with the software vendor.  This technique should be
realizable to any verified exploit, the proof of the exploit becomes
the fitness function used to drive the repair algorithm.

In the remainder of this paper we; review two recent exploits to the
widely distributed (over XXXX available through shodan) NETGEAR
WNDR3700 (Section [[#exploits]]), demonstrate the feasibility of running
embedded firmware in a VM sandbox (Section [[#firmware]]), adapt existing
techniques of automated program repair of x86 and ARM ELF files to run
on stripped MIPS executables with no section tables (Section
[[#mips-mutation]]) which are evolved in a parallelized steady state
genetic algorithm and minimized using delta debugging (Section
[[#pll-ga]]).  We then analyze the runtime behavior and results of the
repair algorithm with respect to their functionality, security and
maintainability.

The contributions of this short paper are;
1. use of system emulation to build a virtualized execution
   environment allowing the evaluation of embedded device drivers
2. an application of automated repair to stripped MIPS ELF files
   recovered from router firmware
3. an application of automated repair to a real-world un-patched
   security exploit resulting in
4. the first demonstration of multiple repair in a single evolutionary
   run.

In the pursuit of /Reproducible Research/ cite:buckheit1995wavelab
cite:mesirov2010accessible and to encourage researchers to patches
future discovered exploits, a companion version control
repository [fn:1] contains the instructions, programs, and tooling
used to extract and execute and repair the binary NETGEAR router
image.  Additionally, the analysis performed in this document and all
supporting figures may be automatically regenerated from new
experimental data using the Org-mode Reproducible Research framework
cite:schulte2012reproducible-research.

The tooling and technique demonstrated herein may be generalized to
other embedded binary executables, making it possible to patch future
exploits in closed-source commercial application without waiting for
the software vendor to acknowledge or address the exploit.

* Description of Exploits
  :PROPERTIES:
  :CUSTOM_ID: exploits
  :END:
* Repair Technique
** Router Firmware Extraction and Virtualization
   :PROPERTIES:
   :CUSTOM_ID: firmware
   :END:
** Mutation of stripped MIPS ELF Files
   :PROPERTIES:
   :CUSTOM_ID: mips-mutation
   :END:
- Brief overview of ELF format files.

- The ELF file in question had no section table, so instead of
  mutating the =.text= section all loadable program sections were
  mutated

#+name: ELF-layout
#+header: :file (by-backend (latex 'nil) (t "elf-layout.svg"))
#+header: :results (by-backend (pdf "latex") (t "raw"))
#+header: :cache (by-backend (latex "no") (t "yes"))
#+begin_src latex
  \begin{tikzpicture}
    \node[draw,rectangle] (elf) at (0,0) {ELF};
  \end{tikzpicture}
#+end_src

#+RESULTS[bb66ecd978d3ee64cd671d03133e643c6fc7e8db]: ELF-layout
[[file:elf-layout.svg]]

Was it 1 or 2 point crossover?

#+name: mutation-ops
#+header: :file (by-backend (latex 'nil) (t "mut-ops.svg"))
#+header: :results (by-backend (pdf "latex") (t "raw"))
#+header: :cache (by-backend (latex "no") (t "yes"))
#+begin_src latex
  \tikzstyle{asmrow} = [rectangle, draw, minimum width=2em, minimum height=1em]
  \begin{tikzpicture}
    % Mutation
    \foreach \x in {-3.5,-2.5,-0.5,0.5,2.5,3.5}{
      \foreach \y in {-0.8,-0.4,0,0.4,0.8}{
        \node[asmrow,fill=green!40] at (\x,\y) {};
      }
    }
    % Replace
    \node at (-3,1.25) {Replace};
    \node[asmrow,fill=yellow!20] (c-from) at (-3.5,0.4) {};
    \node[asmrow,fill=blue!60] at (-3.5,-0.4) {};
    % replace-after
    \node[asmrow,fill=yellow!20] at (-2.5,0.4) {};
    \node[asmrow,fill=yellow!20] (c-to) at (-2.5,-0.4) {};
    \node[asmrow,fill=green!40]  at (-2.5,-0.8) {};
    % Delete
    \node at (0,1.25) {Delete};
    \node[asmrow,fill=red!40] (d-from) at (-0.5,0) {};
    % delete-after
    \node[asmrow,fill=white] (d-to) at (0.5,0) {\scriptsize{0x0}};
    % Swap
    \node at (3,1.25) {Swap};
    \node[asmrow,fill=yellow!20] (s1-from) at (2.5,0.4) {};
    \node[asmrow,fill=blue!60] (s2-from) at (2.5,-0.4) {};
    % swap-after
    \node[asmrow,fill=blue!60] (s2-to) at (3.5,0.4) {};
    \node[asmrow,fill=yellow!20] (s1-to) at (3.5,-0.4) {};
    % arrows
    \draw[->,thick] (c-from.east) to (c-to.west);
    \draw[->,thick] (d-from.east) to (d-to.west);
    \draw[->,thick] (s1-from.east) to (s1-to.west);
    \draw[->,thick] (s2-from.east) to (s2-to.west);
    % Crossover
    \foreach \x in {-1.5,1.5}{
      \foreach \y in {-3.8,-3.4,-3,-2.6,-2.2}{
        \node[asmrow,fill=green!40] at (\x,\y) {};
      }
    }
    \foreach \x in {-0.5}{
      \foreach \y in {-3.8,-3.4,-3,-2.6,-2.2}{
        \node[asmrow,fill=blue!60] at (\x,\y) {};
      }
    }
    \node at (0,-1.7) {Two Point Crossover};
    \draw[->,thick] (-2,-2.4) to (2,-2.4);
    \draw[->,thick] (-2,-3.2) to (2,-3.2);
    \node[asmrow,fill=blue!60] at (1.5,-2.6) {};
    \node[asmrow,fill=blue!60] at (1.5,-3) {};
  \end{tikzpicture}
#+end_src

#+RESULTS[17b362c56616d0afadd5ff0131a9baaacdfdb23b]: mutation-ops
[[file:mut-ops.svg]]

** Parallel Automated Program Repair Technique
   :PROPERTIES:
   :CUSTOM_ID: pll-ga
   :END:
* Repair Results
** Repair Run
parameters used, runtime, etc...

** Analysis of Repair
- The repairs required two distinct fixes to two different exploits in a
  single long evolutionary run (an instance of "iterative repair").

- The initial evolved repair broke untested behavior (e.g., it worked
  when the cgi file was called directly on the command line but not
  through the embedded [[http://wiki.openwrt.org/doc/uci/uhttpd][ÂµHTTPd]] webserver).  The minimized version of
  the repair fixed these issues and works as expected.

- The initial evolved repair differed from the original at 789
  distinct locations (measured with a unified diff), the minimized
  differed from the original at 2 such locations.

* COMMENT Proactive Repair?
Apply Zak's technique of proactive repair and see if anything shakes
out.

* Related Work
* Next Steps
- operation directly on a binary image
  - would require better virtualization
  - would require better fault localization
- proactive hardening
  - shutting off (read:breaking) insecure functionality such as
    password reset
  - combination with a fuzz tester in a closed exploit/repair loop
- distributed diversity
  - self certifying patches

* Conclusion
This technique demonstrates the current ability of end users to fix
software exploits in embedded devices without any special information
or help from the software vendor.

Estimate the amount of money cost by delay in release of vendor
patches?

#+BIBLIOGRAPHY: netgear-repair plain

* Footnotes

[fn:1] https://github.com/eschulte/netgear-repair
* COMMENT Notes [0/2]
** TODO define image and firmware
** TODO collect average bug lifetime from a bug database
* COMMENT Support
#+begin_src emacs-lisp :results silent
  (setq org-babel-latex-htlatex "htlatex")
  (defmacro by-backend (&rest body)
    `(case (if (boundp 'backend) (org-export-backend-name backend) nil) ,@body))
#+end_src
