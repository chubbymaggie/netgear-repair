# -*- org -*-
#+Options: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="etc/netgear-repair.css" />

* Automated Repair of Exploits in NETGEAR Router Binary
  :PROPERTIES:
  :EXPORT_FILE_NAME: index
  :EXPORT_OPTIONS: num:nil
  :END:
** Summary
Version 4 of NETGEAR's WNDR3700 wireless router contains exploits
allowing unauthenticated users to change administrative options and
completely disable authentication across reboots (see [fn:1]).

We fix these exploits using a method of automated program
repair [fn:2] which operates directly on binary ELF files and requires
no access to source code.  This fix was found before NETGEAR addressed
these exploits---to my knowledge NETGEAR has not yet patched these
exploits in the latest release of the firmware 1.0.1.42 as of
2013-11-19.

This repository contains the instructions, code, and tooling used to
develop this repair.  These tools may be used to automatically change
the behavior other binary ELF executables, making it possible to fix
customize and alter binaries executables without any aid from the
software's developer.

A detailed description of the exploit and the repair technique and the
repairs found is available at [fn:3] and step by step instructions to
reproduce this repair are given in [[file:INSTRUCTIONS.html][INSTRUCTIONS]].

Thanks to Zachary Cutlip for help reproducing these exploits in a VM.

** TODO Description of Exploits
** TODO Run Router in a Virtual Machine
** TODO Evolutionary Repair Technique
- The repair required working over MIPS RISC assembler allowing for
  simplified mutation operators.

** TODO Application of Repair Technique
** TODO Analysis of Evolved Repair
- The ELF file in question had no section table, so instead of
  mutating the =.text= section all loadable program sections were
  mutated

- The repairs required two distinct fixes to two different exploits in a
  single long evolutionary run (an instance of "iterative repair").

- The initial evolved repair broke untested behavior (e.g., it worked
  when the cgi file was called directly on the command line but not
  through the embedded [[http://wiki.openwrt.org/doc/uci/uhttpd][ÂµHTTPd]] webserver).  The minimized version of
  the repair fixed these issues and works as expected.

- The initial evolved repair differed from the original at 789
  distinct locations (measured with a unified diff), the minimized
  differed from the original at 2 such locations.

* Reproduction Instructions
  :PROPERTIES:
  :EXPORT_FILE_NAME: INSTRUCTIONS
  :END:
The following steps walk through the process of evolving a repair to
the NETGEAR =net-cgi= security exploits.  The instructions assume that
the user has checked out this repository locally and is running all
actions from the base of the repo with the =./bin= directory in their
path.

For a full description of the exploits, repair technique and
properties of the evolved repair see [[file:index.html][Automated Repair of Exploits in
NETGEAR Router Binary]].

** Setting up the VM
1. Following the instructions from [[http://shadow-file.blogspot.com/2013/05/running-debian-mips-linux-in-qemu.html][running-debian-mips-linux-in-qemu]]
   download the files in the =mips= subdirectory of
   http://people.debian.org/~aurel32/qemu/ and save them to
   =debian-qemu/be=.

2. Ensure a new version of QEMU is installed, and that you have a
   network bridge setup following the instructions in [[https://wiki.archlinux.org/index.php/QEMU][QEMU]] and
   [[https://wiki.archlinux.org/index.php/Bridge_with_netctl][Bridge_with_netctl]].

3. You'll want configure ssh access and install binwalk.  From this
   point on the VM shouldn't require external internet access.  Note:
   Although the =run-vm= executable is configured to work with either
   big endian or little endian mips images, we'll only use the big
   endian version as that is the architecture of the NETGEAR router.
   1. start the vm
      #+begin_src sh
        export ENDIANESS=be
        bin/run-vm -b -D
      #+end_src
   2. as root in the qemu window, install sshd
      #+begin_src sh
        apt-get update
        apt-get install openssh-server
      #+end_src
   3. shutdown the VM's and kill the qemu processes

4. install binwalk (more easily done on a Debian system)
   #+begin_src sh
     wget https://binwalk.googlecode.com/files/binwalk-1.2.2-1.tar.gz
     tar xzf binwalk-1.2.2-1.tar.gz
     cd binwalk-1.2.2-1/src/
     ./debian_quick_install.sh # on Debian, else manually install
   #+end_src

5. Now to grab the NETGEAR firmware and extract the filesystem
   #+begin_src sh
     wget \
       http://www.downloads.netgear.com/files/GDC/WNDR3700V4/WNDR3700V4_V1.0.1.42.zip
     unzip WNDR3700V4_V1.0.1.42.zip
     binwalk -e WNDR3700v4-V1.0.1.42.img
   #+end_src
   we can now see the broken cgi file in the extracted filesystem.
   #+begin_src sh
     file _WNDR3700v4-V1.0.1.42.img.extracted/squashfs-root/usr/sbin/net-cgi
   #+end_src

6. Copy the squashfs filesystem to the QEMU VM.
** Run =net-cgi= from the command line in the VM
1. The web server on the NETGEAR router (=uhttpd=) calls =net-cgi= for
   basically every web page.  We'll want to call =net-cgi= from the
   command line.  Every header passed in by =uhttpd= may be passed on
   the command line as an environment variable.  The script in
   file:bin/call-cgi will handle this for us.

2. We need to run =net-cgi= from within the NETGEAR firmware, since
   this is unpacked into =~/squashfs-root= in our VM, the command to
   invoke =net-cgi= will need to us =chroot=.  However at this point
   =net-cgi= will segfault trying to read files in =/proc= (thanks to
   =strace= for debugging help here).  We can map =/proc=, =/lib/init=
   and =/dev= from the VM into =squashfs-root= with the following.
   #+begin_src sh
     mount -o bind /proc  squashfs-root/proc
     mkdir -p squashfs-root/lib/init
     mount -o bind /lib/init/  squashfs-root/lib/init
     mount -o bind /dev/  squashfs-root/dev
   #+end_src

3. We'll also need to start the =datalib= service which appears to
   make configuration information available to =net-cgi=, and then set
   the value of the =dns_hijack= configuration to "0" to avoid 404
   errors.
   #+begin_src sh
     chroot squashfs-root/ /bin/datalib
     chroot squashfs-root/ /bin/config set dns_hijack="0"
   #+end_src

4. After all of this we can now call =net-cgi= from the command line
   with the following.
   #+begin_src sh
     URI="index.htm" call-cgi chroot squashfs-root /usr/sbin/net-cgi
   #+end_src

** Trace the execution of =net-cgi=                                :noexport:
This step is optional and was not used in the actual repair process
(although it is possible it could speed up the evolutionary search by
guiding the mutation operators).

1. Install oprofile in the VM.
   #+begin_src sh
     apt-get install oprofile
   #+end_src

2. Begin sampling the program counter with oprofile.
   #+begin_src sh
     opcontrol --start
   #+end_src

3. Run =net-cgi= for a while to collect trace data.
   #+begin_src sh
     for i in $(seq 100);do test-cgi; done
   #+end_src

4. Dump the collected oprofile samples into a file.
   #+begin_src sh
     opcontrol --stop
     opreport -a -d squashfs-root/usr/sbin/net-cgi -o net-cgi.sample
   #+end_src

** Start a pool of overlays for fitness evaluation
Note that these steps were performed on a 64-core machine using 64
virtual machines for parallel fitness evaluation.  Adjust the number
of overlays and the degree of parallelism to match your hardware.

1. First we need to ensure that all required scripts are included in
   the original VM.  Copy file:bin/call-cgi and file:bin/test-cgi into
   the =/root/bin= directory of the virtual machine.  Shut down the
   virtual machine.

2. Generate multiple overlays.
   #+begin_src sh
     make-overlay overlays/{0..63}.qcow2
   #+end_src

3. Launch all overlays.
   #+begin_src sh
     for i in {0..63};do
         run-vm -i overlays/$i.qcow2 -p 66$(printf "%0.2d" $i)
     done
   #+end_src

** Evolve a version of =net-cgi= without the exploit
The SOFTWARE-EVOLUTION library used to perform this repair is
implemented in Common Lisp.  All of the following dependencies will
need to be installed.

1. [[http://www.sbcl.org/][Steel Bank Common Lisp (SBCL)]] or [[Clozure Common Lisp (CCL)][http://ccl.clozure.com/]].

2. The [[http://www.quicklisp.org/beta/][Quicklisp]] Common Lisp package manager which will be used to
   install all of the required lisp packages.  Follow the instructions
   on the Quicklisp site to install it.

3. Under the directory to which quicklisp has been installed (by
   default =~/quicklisp=), there will be a =local-projects= directory.
   Clone the following git repositories into this directory.

   #+begin_src sh
     git clone git://github.com/eschulte/software-evolution.git
     git clone git://github.com/eschulte/delta-debug.git
     git clone git://github.com/eschulte/diff.git
   #+end_src

   You will also need to symlink this repository into your
   =local-projects= directory.

   #+begin_src sh
     ln -s $(pwd) ~/quicklisp/local-projects/
   #+end_src

   Finally, ensure Quicklisp has been added to your init file, and
   then use Quicklisp to register these newly cloned local projects.

   #+begin_src lisp
     (ql:add-to-init-file)
     (ql:register-local-projects)
   #+end_src

4. Once Quicklisp and these dependencies have all been installed, run
   the following to install the NETGEAR-REPAIR package and all of its
   dependencies.

   #+begin_src lisp
     (ql:quickload :netgear-repair)
   #+end_src

5. Optionally checkout the following tool for the protected execution
   of shell commands through the file system.  This serves to isolate
   the evolutionary process from the many errors thrown during
   long-running evolutionary runs, the accumulation of which can
   occasionally stall the lisp process or upset the operating system.
   From the base of this directory run the following to clone
   sh-runner.

   #+begin_src sh
     git clone git://github.com/eschulte/sh-runner.git
   #+end_src

At this point all dependencies have been installed.  The code used to
perform the repair is located in file:src/netgear-repair.lisp.  Browse
this file to see how repair is performed, or simply execute the
following in the lisp REPL.

#+begin_src lisp
  (setf *port* 6600)          ; starting port for your VMs
  (setf number-of-threads 64) ; number of threads in which to run repair
  (run)                       ; kick off the repair process
#+end_src

* Notes [1/2]
** TODO lazy regression testing
What if we don't write any regression test?

Steps,
1. start with just the exploit test
2. evolve a fix
3. minimize the fix
4. evaluate, if broken add regression test identifying breakage, else
   return

** CANCELED different quality regression test suites
Quality of tests
|   0% | no pages, just run w/o error |
|   x% | original run, very few       |
|  25% |                              |
|  50% |                              |
| 100% |                              |

For a graph/table with
| X  | size of trace during testing     |
|    | or percent of total files served |
| Y1 | percentage of pages preserved    |
| Y2 | repair run time (wall clock)     |

** differences in the minimized repair
#+begin_src lisp
  (loop :for a :in (coerce (data (nth 3 (sections (elf original)))) 'list)
                        :for b :in (coerce (data (nth 3 (sections (elf minimized)))) 'list)
                        :as i :from 0 :do
                     (when (not (equalp a b))
                       (format t "at ~d, ~a -> ~a~%" i a b)))
  ;; => at 292412, 175 -> 143
  ;; => at 332588, 104 -> 0
#+end_src

So a deletion at offset 332588 in the program data (in the first
loadable program section), and substitution at offset 292412 in the
program data.

** converting the oprofile vma's to elf offsets
#+begin_quote EXECUTABLE AND LINKABLE FORMAT (ELF)
an executable or shared object file's base address is calculated
during execution from three values: the memory load address, the
maximum page size, and the lowest virtual address of a program's
loadable segment. as ``program loading'' in this chapter describes,
the virtual addresses in the program headers might not represent the
actual virtual addresses of the program's memory image. to compute the
base address, one determines the memory address associated with the
lowest p_vaddr value for a pt_load segment. one then obtains the base
address by truncating the memory address to the nearest multiple of
the maximum page size. depending on the kind of file being loaded into
memory, the memory address might or might not match the p_vaddr
values.
#+end_quote

Find the lowest =p_vaddr= value of a =pt_load= segment.
#+begin_src lisp
  (extremum (mapcar [#'vaddr #'ph]
                    (remove-if-not [{eql :load}  #'elf:type]
                                   (sections (base orig)))) #'<) ; => 4194304
#+end_src

Given that this value is an exponent of 2,
#+begin_src lisp
  (= 4194304 (expt 2 22)) ; => 2
#+end_src
we'll assume that it is a "multiple of the maximum page size", so lets
just skip that bit about truncating.

So, I guess we can just read all of oprofile vma's as being relative
to the base of the first (in virtual memory) loadable section.  For
every section, we'll just shift the oprofile addresses by the
difference between the =vaddr= of that section and the base.

** I save this but never know why -- root ssh keys
To allow automated ssh access to the VMs.
: ssh-keygen
: Generating public/private rsa key pair.
: Enter file in which to save the key (/nfs/adaptive/eschulte/.ssh/id_rsa): etc/root-key
: Enter passphrase (empty for no passphrase): 
: Enter same passphrase again: 
: Your identification has been saved in etc/root-key.
: Your public key has been saved in etc/root-key.pub.
: The key fingerprint is:
: 13:ca:72:66:3a:3a:69:88:85:fe:9c:be:5a:f4:08:f3 eschulte@prime
: The key's randomart image is:
: +--[ RSA 2048]----+
: |                 |
: |                 |
: |        .        |
: |     . . .       |
: | + .. * S        |
: |. * o*   .       |
: |oo Eo.           |
: |o.*...           |
: | o=B.            |
: +-----------------+

** NETGEAR GPL-mandated open-source release
- http://kb.netgear.com/app/answers/detail/a_id/2649
- http://www.downloads.netgear.com/files/GPL/WNDR3700V4_V1.0.1.42_gpl_src.zip

** =net-cgi= tests
Positive Tests
- ensure serves up a variety of pages as normal
- one of each mime type

Negative Tests
1. no authentication for =BRS_*= files

2. no authentication if =unauth.cgi= or =securityquestions.cgi= are in
   the path, even in the query string, e.g., 
   : http://router_address/protected_page.htm?foo=unauth.cgi

3. browsing to the following sets =hijack_process= to something other
   than three in the nvram, disabling authentication checks
   : http://router_address/BRS_02_genieHelp.html
   this last one can be skipped because it is superseded by (1)

The test script will need to
- set the appropriate values in the datalib
- call =net-cgi= with the appropriate =URI= and =QUERY= environment variables
- occasionally check that the =hijack_process= value in the datalib
  remains unchanged

** =net-cgi= segfaults
*** look through =strace= output
file:stuff/net-cgi.strace

Narrative of net-cgi execution
1. open a socket
   : socket(PF_INET, SOCK_DGRAM, IPPROTO_IP) = 3
   : connect(3, {sa_family=AF_INET, sin_port=htons(2313), sin_addr=inet_addr("127.0.0.1")}, 16) = 0
   : setsockopt(3, SOL_SOCKET, SO_NO_CHECK, [1], 4) = 0
   : sendto(3, "\2GUI_Region", 11, 0, NULL, 0) = 11
2. find the language
3. read the appropriate =www/languages-XX.js= file
4. open =/proc/partitions= and call =df= writing results to =/tmp/df_out=
5. send a number of things to the socket opened in (1)
6. attempt to open =/proc/net/arp=, fail and segfault
   : open("/proc/net/arp", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
   : rt_sigaction(SIGQUIT, {0x10000000, [], SA_NOCLDSTOP}, {0x10000000, [], 0}, 16) = 0
   : rt_sigaction(SIGINT, {0x10000000, [], SA_NOCLDSTOP}, {0x10000000, [], 0}, 16) = 0
   : rt_sigaction(SIGCHLD, {0x10000000, [], 0}, {0x10000000, [], 0}, 16) = 0
   : fork()                                  = 1376
   : rt_sigaction(SIGQUIT, {0x10000000, [], SA_NOCLDSTOP}, {0x10000000, [], SA_NOCLDSTOP}, 16) = 0
   : rt_sigaction(SIGINT, {0x10000000, [], SA_NOCLDSTOP}, {0x10000000, [], SA_NOCLDSTOP}, 16) = 0

We can run with bridge networking while connected to ethernet, and
then mount the real =/proc= into our chroot file system.
: mount -o bind /proc  squashfs-root/proc

** system wide set LD_PRELOAD
Looks like you can copy the file to =/etc/ld.so.preload=.

** Running the webserver (=uhttpd=) in the firmware
From the root of the firmware FS we see that [[http://wiki.openwrt.org/doc/howto/http.uhttpd][uhttpd]] is the webserver used.
: # find ./ -name "*htt*"
: ./www/help/_green_download_http_help.html
: ./www/cgi-bin/uhttpd.sh
: ./etc/config/uhttpd
: ./etc/rc.d/S50uhttpd
: ./etc/init.d/uhttpd
: ./usr/lib/opkg/info/uhttpd-mod-tls.list
: ./usr/lib/opkg/info/uhttpd.list
: ./usr/lib/uhttpd_tls.so
: ./usr/sbin/uhttpd

The webserver may be started with the following (from within =chroot=).
: /www/cgi-bin/uhttpd.sh start

** calling net-cgi from the command line
*** the calling process
1. turn on the data directory with
   #+begin_src sh
     chroot squashfs-root/ /bin/datalib
   #+end_src

   you should see something like

   : Loading data from /dev/mtd5 ...
   : Resetting to default values ...
   : The data center is Running ...

2. Turn off =dns_hijack=, else you'll get 404 errors for every page...
   #+begin_src sh
     chroot squashfs-root/ /bin/config set dns_hijack="0"
   #+end_src

3. Now we can finally get real web pages calling =net-cgi= from the
   command line.
   #+begin_src sh
     URI="index.htm" call-cgi chroot squashfs-root /usr/sbin/net-cgi
   #+end_src

*** find how net-cgi is called
Replacing =net-cgi= with the following shows how it is called by the web-server.
#+begin_src sh
  #!/bin/sh
  
  cat <<EOF
  Content-type: text/plain
  
  I was called with the following.
  
  arguments:
  $@
  
  environment:
  $(env)
  
  stdin:
  $(cat -)
  
  Bye.
  EOF
#+end_src

With the webserver started calling =wget http://localhost/= will write
the following to =index.html=.
: I was called with the following.
: arguments:
: 
: 
: environment:
: GATEWAY_INTERFACE=CGI/1.1
: REMOTE_HOST=127.0.0.1
: REMOTE_ADDR=127.0.0.1
: QUERY_STRING=
: HTTP_USER_AGENT=Wget/1.12 (linux-gnu)
: DOCUMENT_ROOT=/www
: REMOTE_PORT=56786
: HTTP_ACCEPT=*/*
: SCRIPT_FILENAME=/www/start.htm
: HTTP_HOST=localhost
: REQUEST_URI=/
: SERVER_SOFTWARE=uHTTPd
: HTTP_CONNECTION=Keep-Alive
: PATH=/sbin:/usr/sbin:/bin:/usr/bin
: SERVER_PROTOCOL=HTTP/1.0
: REQUEST_METHOD=GET
: SERVER_ADDR=127.0.0.1
: PWD=/www
: SERVER_PORT=80
: SCRIPT_NAME=/start.htm
: TZ=
: SERVER_NAME=127.0.0.1
: 
: stdin:
: 
: Bye.
*** call net-cgi from the command line
The following script may be copied into the firmware and used to call
net-cgi from the command line file:bin/call-cgi

Had to run =mkdir /proc/mounts= to appease =df= called by =net-cgi=.

** cross compiling =nvram-faker=
https://github.com/zcutlip/nvram-faker

Need to use the openwrt cross-compilation tool chain so that =uclibc=
will be used. see http://wiki.openwrt.org/doc/howto/buildroot.exigence

*** openwrt cross-compilation
- http://downloads.openwrt.org/docs/buildroot-documentation.html
- http://www.frontiernet.net/~beakmyn/CrossCompile.htm

** Original Article
http://shadow-file.blogspot.com/2013/10/complete-persistent-compromise-of.html

** Links for NETGEAR firmware
- http://www.userdrivers.com/LAN-Network-Adapter/Netgear-WNDR3700v4-Router-Firmware-Upgrade-1-0-1-42-All-Regions-Except-China-Russia/download/
- http://www.userdrivers.com/go.php?link=aHR0cDovL3d3dy5kb3dubG9hZHMubmV0Z2Vhci5jb20vZmlsZXMvR0RDL1dORFIzNzAwVjQvV05EUjM3MDBWNF9WMS4wLjEuNDIuemlw

** Notes from Zach Cutlip
Hi Eric,

I think the best approach is to describe how I set up my tool chain
and environment.  Hopefully that will be helpful for you.

To start with, I do my work in an Ubuntu VM.  Specifically 12.04.  I
don't think the exact release matters, but I know 12.04 works with my
tools.

I keep a set of cross compilers in my path for various
architectures. In my opinion, building with a cross compiler is faster
and easier than building with gcc inside QEMU.  I recommend building a
set of cross-compiling toolchains using Buildroot.  Buildroot uses a
Linux Kernel-style menuconfig build system.  I don't have anything
written up on building cross compilers, but I could probably send you
my buildroot configuration if you need it, and if I can find it.

You can download the firmware for the router from NETGEAR's support website.
Here's a link to the firmware:
http://support.netgear.com/product/wndr3700v4

In order to unpack the firmware, I recommend my colleague, Craig
Heffner's tool, Binwalk:
https://code.google.com/p/binwalk/

Binwalk will analyze a binary file and describe the subcomponents it
finds within, such as filesystems, compressed kernel,
etc. Additionally, it can unpack the subcomponents it finds, assuming
it knows how.
Install binwalk in your Ubuntu environment using the
"debian_quick_install.sh" installation script, which will apt-get
install a number of dependencies.
Rather than describe binwalk's usage, I'll refer you to the wiki:
https://code.google.com/p/binwalk/wiki/Usage?tm=6

Also, in your Ubuntu environment you'll need a Debian MIPS QEMU system
that you can use to emulate the firmware's binaries.

I found lots of information about running Debian in QEMU, but most of
it was incomplete, and a lot of it was inconsistent, so I've written a
blog post describing how I set up my QEMU systems:
http://shadow-file.blogspot.com/2013/05/running-debian-mips-linux-in-qemu.html

This is just personal, but I like to export my workspace to the QEMU
machines via NFS.  In fact, I export my workspace from my Mac via NFS,
and my Ubuntu VMs and Debian QEMU VMs all mount the same
directory. That way I'm not having to copy firmware, scripts and
debuggers around.

Once logged into your QEMU VM, you can chroot into the router's
firmware and run some of its binaries:

firmware_rootfs # chroot . /bin/sh
#

The simple ones, such as busybox, will run with no problem.  The web
server, upnp server, etc. are more complicated because they make a lot
of assumptions about the router's specific hardware being present.

One of the problems you run into has to do with queries to NVRAM for
runtime configuration.  Obviously, your Debian MIPS Linux has no
NVRAM, so these queries will fail.  For that, I have a project called
"nvram-faker":
https://github.com/zcutlip/nvram-faker

You build the library for your target and preload it using the
LD_PRELOAD environment variable.  It intercepts calls to nvram_get and
provides answers based on the contents an nvram.ini file that you
provide. It prints all the nvram queries to stdout, and colorizes the
ones that it couldn't find in the .ini file.  Obviously it takes some
guesswork to provide sane configuration parameters.

Sometimes you can skip running the web server and just run the cgi
binaries from a shell script.  Most cgi binaries take their input from
the web server as a combination of standard input and environment
variables.  They send their response to the web server over standard
output.

I hope this helps.  Let me know if I can help any other way.

Zach
* Footnotes

[fn:1] http://shadow-file.blogspot.com/2013/10/complete-persistent-compromise-of.html

[fn:2] http://cs.unm.edu/~eschulte/data/schulte2013embedded.pdf

[fn:3] http://eschulte.github.io/netgear-repair

[fn:4] https://github.com/eschulte/netgear-repair


